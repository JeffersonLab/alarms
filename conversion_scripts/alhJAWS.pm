
package alhJAWS;
use strict;

use alhCLASS;
use alhJAWSUtils;

our @ISA = qw(Exporter);
our @EXPORT = qw(writeJAWS makeJAWS convertSystem);

my %jawshash;

## This subroutine is calls for alh systems that are
#  not autogenerated. It reads the epics .alhConfig file
#  directly
# @param system - epics alarm system
# @param pattern - file pattern of interest (default: "*.alhConfig")
sub convertSystem {
   my $system = $_[0];
   my $pattern = $_[1];
   
   my $datadir = 
      "/a/opsdata/fiefdata/fileio/m/makeALHConfig/data/F2-0/SYSTEMS/$system/MASTER";
   chdir($datadir) || die "unable to chdir to $datadir\n";
   
   #File patter of interest
   if (!$pattern) {
      $pattern = "*.alhConfig";
   }    
   my @alhfiles = glob($pattern);
   
   #reusable hash to create the alhJAWS object
   my %alarmhash;
   
   #Iterate through each alarm file in the directory
   foreach my $alhfile (@alhfiles) {
      open(FILE,"$alhfile");
      
      #Lines of interest. 
      #CHANNEL <> <pv> <latching>
      #ALIAS <name>  
      while(<FILE>) {
         my $line = $_;
         chomp($line);
         
         #Extract the pv and latching parameters
         if ($line =~ m/CHANNEL/) {
            my @splitline = split(" ",$line);
            my $pv = @splitline[2];
            my $latching = @splitline[3];
            if ($latching) {
               $latching = "true";
            }
            
            #Assign values to the parameters.
            %alarmhash->{'pv'} = $pv;
            %alarmhash->{'latching'} = $latching;
         
         } elsif ($line =~ m/ALIAS/) {
            %alarmhash->{'alias'} = $line;            
            #Convert the %alarmhash into a JAWS object
            my $jaws = convertToJAWS(%alarmhash);
            my $jawsname = $jaws->{'name'};
            
            %jawshash->{$jawsname} = $jaws;
         }
         #last;
      }
      close(FILE);      
   } 
   return(\%jawshash);
}

## Convert the epics alarm to a JAWS object
sub convertToJAWS {
   my %alarmhash = @_;
     
   my $alias = %alarmhash->{'alias'};
   $alias =~ s/\$ALIAS\s+//g;
   $alias =~ s/ -//g;
   %alarmhash->{'name'} = $alias;
   %alarmhash->{'alias'} = $alias;
   
   my $jaws = new alhJAWS("",%alarmhash);
   $jaws->{'producer'} = $jaws->getProducer($jaws->{'pv'});
   return($jaws);

}

### Called from alhConfig script to write JAWS definitions out.
sub writeJAWS {
   my $alarmhash = $_[0];
   my $filename = $_[1];
   
   deleteExistingJAWS($filename);
   
   my $names;
   foreach my $key (sort(keys(%$alarmhash))) {
      my $jawsalarm = $alarmhash->{$key}; 
      my $paramlist = $jawsalarm->{'paramlist'};
      my $def = createJAWSDef($jawsalarm,$paramlist); 
      printJAWSDef($def,$filename);
   } 
}

## Called by the alhSystemManager to create an individual JAWS object
# @params alarm - the alh alarm 
# @params alarmarea - the current area being processed by the manager
# @params jawsparams - hash of parameter overrides
sub makeJAWS {
   my $alarm = $_[0];
   my $alarmarea = $_[1];
   
   my %jawsparams = @_;
   
   # $device = the device to which this alarm belongs
   my $device = $alarm->{'device'};
   
   #  $devicearea = the area OR areas can be multiple (AREA1,AREA2...) 
   my $devicearea = $device->{'area'};
   
   #  $devicesubarea = the subarea to which this device belongs (can be "")
   my $devicesubarea = $device->{'subarea'};
   
 
   my $jawsarea = $devicearea;

   #############################################
   #Is there subarea, and does the area have subareas? 
   #Not exactly the same thing when you have multiple areas.
   
   #The device has a subarea defined
   if ($devicesubarea) {   
      #The parent area    
      my $parentarea = findParentArea($devicesubarea);      
      #The devicearea already includes the subarea 
      if ($devicearea =~ m/$devicesubarea/) {
         #Remove the parent from the string if necessary
         $devicearea =~ s/$parentarea(,.*?)//g;
      } else {
         $devicearea =~ s/$parentarea/$devicesubarea/;                 
      }
      $jawsarea = $devicearea;        
    }
          
    my $category = %jawsparams->{'category'};
    if (!$category) {
      $category = $alarm->{'device'}->{'type'};
    }
    
    %jawsparams->{'location'} = $jawsarea;
    %jawsparams->{'category'} = uc($category);   
    my $jaws = new alhJAWS($alarm,%jawsparams);
    
    return($jaws);

}

#Create a new JAWS Alarm
#@param alarm - epics alarm handler object
#@param params - optional parameters
sub new {
  my $class = shift;
  my $alarm = shift;  
  my %params = @_;
  
  #Initialize the object with the passed in parameters
  my $self = \%params;
  
  #list of parameters to 
  my @jawsparams = qw(class producer location	maskedby screencommand);
  @jawsparams = sort(@jawsparams);  
  $self->{'paramlist'} = \@jawsparams;

  bless($self,$class);
  
  #Uninitialized JAWS alarm
  if (!$alarm) {
    return($self);
  }
  #This is the epics alarm handler alarm. 
  $self->{'alarm'} = $alarm; 
  
  $self->config();   
  return($self);
}

## Configure the JAWS Alarm from the epics alarm class
sub config {
   my $self = shift;

   $self->{'name'} = $self->getName();
   $self->{'location'} = $self->getLocation();
   $self->{'producer'} = $self->getProducer();
   $self->{'latching'} = $self->getLatching();
   $self->{'screencommand'} = $self->getScreen();
   $self->{'ondelayseconds'} = $self->getDelay();
   $self->{'class'} = $self->getClass();
   #These are not in the current alarm handler system, they will
   #be null 
   $self->{'offdelayseconds'} = 'null';
   $self->{'correctiveaction'} = 'null';
   $self->{'filterable'} = 'null';
   $self->{'maskedby'} = 'null';
   
   $self->{'pointofcontactusername'} = 'null';
   $self->{'priority'} = 'null';
   $self->{'rationale'} = 'null';
   
   my $params = $self->{'paramlist'};
   #Create the JAWS definition (string that is used to load class)
   my $jawsdef = createJAWSDef($self,$params);   
   $self->{'jawsdef'} = $jawsdef;
}  



## Create the name for the alarm.
sub getName {
   my $self = shift;
   my $alarm = $self->{'alarm'};
      
   my $name = $self->{'name'};
   
   my $device = $alarm->{'device'};
   $self->{'devicename'} = $alarm->{'device'}->{'name'};
   
   #If a name has not been assigned explicitly 
   #use the device name.
   if (!$name) {
      $name = $self->{'devicename'};   
   }  
   
   $name = Trim($name); 
   my $class = $self->getClass();
  
   #Default name
   my $name = "$name $class";   
   return(uc($name));
   
}   

## Extract 'class'
sub getClass {
   my $self = shift;
   
   my $class; 
   if ($self->{'class'}) {
      $class = $self->{'class'};
   } else {
      my $alarm = $self->{'alarm'};
      my $alias = lc($alarm->{'alias'});
      $class = Trim($alias);
      if ($alias =~ m/{.*}\s?(.*)\b/) {
         $class = Trim($1);  
      } 
   }
   return(uc($class));
}

#### CAN THIS GO?? ##### 
sub getLocation {
   my $self = shift;
   my $alarm = $self->{'alarm'};
   
   
   if ($self->{'location'}) {
      return($self->{'location'});
   } 
   my $area = $alarm->{'device'}->{'area'};
   my $jawsarea = $self->{'area'};
   my $devicearea = $area;
  
  if ($jawsarea ne $devicearea) {
      $area = $jawsarea;
   }   
   my $devicename = $alarm->{'device'}->{'name'};   
   my $subarea = $alarm->{'device'}->{'subarea'};
   
   
   #### CORRECT CODE
   my $location = $area;
   if ($subarea) {
      $location = $subarea;   
   }
  # print("$location\n");
   return($location);

}

#Extract the 'ondelayseconds'
sub getDelay {
   my $self = shift;
   my $alarm = $self->{'alarm'};
   
   my $ondelay = 'null';
   if ($self->{'ondelayseconds'}) {
      return($self->{'ondelayseconds'});
   }
   my $delay = $alarm->{'options'}->{'delay'}->{'count'};
   if ($delay) {
      $ondelay = $delay;
   }
   return($ondelay);

}

#Extract 'screencommand'
sub getScreen {
   my $self = shift;
   my $alarm = $self->{'alarm'};
   
   #Yes, it's ugly
   my $screencommand = $self->{'screencommand'};
   $screencommand =~ s/"//g;
   $screencommand = Trim($screencommand);
   if (!$screencommand) {
      $screencommand = $alarm->{'options'}->{'command'};
      if (!$screencommand) {
         $screencommand = 'null';
      }
      if ($screencommand ne 'null') {
         $screencommand =~ s/\n//g;
         $screencommand = Trim($screencommand); 
         $screencommand = "$screencommand";
   
      }
   }
   return($screencommand);
}

#Extract 'latching'
sub getLatching {
   my $self = shift;
   my $alarm = $self->{'alarm'};
   
   my $latching = "true";
   if ($alarm->{'args'} ne "") {
      $latching = "null";
   
   }
   return($latching);
}

#Extract 'producer'
sub getProducer {
   my $self = shift;
   my $pv = $_[0];
   
  
   if (!$pv) {
      my $alarm = $self->{'alarm'};
      $pv = $alarm->{'pv'};
   }
   my $producer = "{\"org.jlab.jaws.entity.EPICSProducer\": {\"pv\": \"$pv\"}}";
   return($producer);
   
}
 
return 1;